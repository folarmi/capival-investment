{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport DashboardService from \"../services/dashboard.service\";\nexport const dashboardStatsAsync = createAsyncThunk(\"dashboard/login\", async (values, _ref) => {\n  let {\n    rejectWithValue\n  } = _ref;\n\n  try {\n    const data = await DashboardService.getDashboardStat();\n    return data;\n  } catch (error) {\n    if (!error.response) {\n      throw error;\n    }\n\n    return rejectWithValue(error.response.data);\n  }\n});\nconst initialState = {\n  isLoading: false\n};\nconst dashboardSlice = createSlice({\n  name: \"dashboard\",\n  initialState,\n  extraReducers: {\n    [dashboardStatsAsync.pending]: state => {\n      state.isLoading = true;\n    },\n    [dashboardStatsAsync.fulfilled]: (state, action) => {\n      state.isLoading = false;\n    },\n    [dashboardStatsAsync.rejected]: state => {\n      state.isLoading = false;\n    }\n  }\n});\nconst {\n  reducer\n} = dashboardSlice;\nexport default reducer;","map":{"version":3,"sources":["/Users/mac/Desktop/Projects/capival/src/slices/dashboard.js"],"names":["createSlice","createAsyncThunk","DashboardService","dashboardStatsAsync","values","rejectWithValue","data","getDashboardStat","error","response","initialState","isLoading","dashboardSlice","name","extraReducers","pending","state","fulfilled","action","rejected","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AAEA,OAAOC,gBAAP,MAA6B,+BAA7B;AAEA,OAAO,MAAMC,mBAAmB,GAAGF,gBAAgB,CACjD,iBADiD,EAEjD,OAAOG,MAAP,WAAuC;AAAA,MAAxB;AAAEC,IAAAA;AAAF,GAAwB;;AACrC,MAAI;AACF,UAAMC,IAAI,GAAG,MAAMJ,gBAAgB,CAACK,gBAAjB,EAAnB;AACA,WAAOD,IAAP;AACD,GAHD,CAGE,OAAOE,KAAP,EAAc;AACd,QAAI,CAACA,KAAK,CAACC,QAAX,EAAqB;AACnB,YAAMD,KAAN;AACD;;AACD,WAAOH,eAAe,CAACG,KAAK,CAACC,QAAN,CAAeH,IAAhB,CAAtB;AACD;AACF,CAZgD,CAA5C;AAeP,MAAMI,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE;AADQ,CAArB;AAIA,MAAMC,cAAc,GAAGZ,WAAW,CAAC;AACjCa,EAAAA,IAAI,EAAE,WAD2B;AAEjCH,EAAAA,YAFiC;AAGjCI,EAAAA,aAAa,EAAE;AACb,KAACX,mBAAmB,CAACY,OAArB,GAAgCC,KAAD,IAAW;AACxCA,MAAAA,KAAK,CAACL,SAAN,GAAkB,IAAlB;AACD,KAHY;AAIb,KAACR,mBAAmB,CAACc,SAArB,GAAiC,CAACD,KAAD,EAAQE,MAAR,KAAmB;AAClDF,MAAAA,KAAK,CAACL,SAAN,GAAkB,KAAlB;AACD,KANY;AAOb,KAACR,mBAAmB,CAACgB,QAArB,GAAiCH,KAAD,IAAW;AACzCA,MAAAA,KAAK,CAACL,SAAN,GAAkB,KAAlB;AACD;AATY;AAHkB,CAAD,CAAlC;AAgBA,MAAM;AAAES,EAAAA;AAAF,IAAcR,cAApB;AAEA,eAAeQ,OAAf","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\nimport DashboardService from \"../services/dashboard.service\";\n\nexport const dashboardStatsAsync = createAsyncThunk(\n  \"dashboard/login\",\n  async (values, { rejectWithValue }) => {\n    try {\n      const data = await DashboardService.getDashboardStat();\n      return data;\n    } catch (error) {\n      if (!error.response) {\n        throw error;\n      }\n      return rejectWithValue(error.response.data);\n    }\n  }\n);\n\nconst initialState = {\n  isLoading: false,\n};\n\nconst dashboardSlice = createSlice({\n  name: \"dashboard\",\n  initialState,\n  extraReducers: {\n    [dashboardStatsAsync.pending]: (state) => {\n      state.isLoading = true;\n    },\n    [dashboardStatsAsync.fulfilled]: (state, action) => {\n      state.isLoading = false;\n    },\n    [dashboardStatsAsync.rejected]: (state) => {\n      state.isLoading = false;\n    },\n  },\n});\n\nconst { reducer } = dashboardSlice;\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}