{"ast":null,"code":"// import store from \"../store\";\nimport axios from \"axios\";\nimport TokenService from \"./token.service\";\nconst baseURL = process.env.REACT_APP_BASE_URL;\n\nconst apiResource = () => {\n  const api = axios.create({\n    baseURL,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Access-Control-Allow-Methods\": \"*\",\n      \"Access-Control-Allow-Origin\": URL,\n      \"Access-Control-Allow-Credentials\": true\n    }\n  });\n  api.interceptors.request.use(config => {\n    const token = localStorage.getItem(\"accessToken\");\n    if (!token) return config;\n    config.headers[\"Authorization\"] = `Bearer ${token}`;\n    return config;\n  }, error => Promise.reject(error));\n  api.interceptors.response.use(response => new Promise((resolve, reject) => {\n    resolve(response);\n  }), async error => {\n    var _error$response, _error$response2;\n\n    if ((error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 403) {\n      TokenService.removeUser(); // window.location = \"/\";\n    } else if ((error === null || error === void 0 ? void 0 : (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 401) {\n      // call refresh token\n      // localStorage.removeUser();\n      // window.location = \"/\";\n      const originalConfig = error.config;\n\n      if (originalConfig.url !== \"/v1/admin/login\" && error !== null && error !== void 0 && error.response) {// Access Token was expired\n        // if (error.response.status === 400 && !originalConfig._retry) {\n        //   originalConfig._retry = true;\n        //   try {\n        //     const rs = await api.post(\"/api/v1/authenticate/refreshtoken\", {\n        //       refreshToken: TokenService.getLocalRefreshToken(),\n        //     });\n        //     const { accessToken } = rs.data;\n        //     TokenService.updateLocalAccessToken(accessToken);\n        //     return api(originalConfig);\n        //   } catch (_error) {\n        //     return Promise.reject(_error);\n        //   }\n        // }\n      }\n    } else {\n      return new Promise((resolve, reject) => {\n        reject(error);\n      });\n    }\n\n    return Promise.reject(error);\n  });\n  return api;\n};\n\nexport const api = apiResource();","map":{"version":3,"sources":["/Users/mac/Desktop/Projects/capival/src/services/api.js"],"names":["axios","TokenService","baseURL","process","env","REACT_APP_BASE_URL","apiResource","api","create","headers","URL","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","response","resolve","status","removeUser","originalConfig","url"],"mappings":"AAAA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,kBAA5B;;AAEA,MAAMC,WAAW,GAAG,MAAM;AACxB,QAAMC,GAAG,GAAGP,KAAK,CAACQ,MAAN,CAAa;AACvBN,IAAAA,OADuB;AAEvBO,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEP,sCAAgC,GAFzB;AAGP,qCAA+BC,GAHxB;AAIP,0CAAoC;AAJ7B;AAFc,GAAb,CAAZ;AAUAH,EAAAA,GAAG,CAACI,YAAJ,CAAiBC,OAAjB,CAAyBC,GAAzB,CACGC,MAAD,IAAY;AACV,UAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAd;AAEA,QAAI,CAACF,KAAL,EAAY,OAAOD,MAAP;AACZA,IAAAA,MAAM,CAACL,OAAP,CAAe,eAAf,IAAmC,UAASM,KAAM,EAAlD;AACA,WAAOD,MAAP;AACD,GAPH,EAQGI,KAAD,IAAWC,OAAO,CAACC,MAAR,CAAeF,KAAf,CARb;AAWAX,EAAAA,GAAG,CAACI,YAAJ,CAAiBU,QAAjB,CAA0BR,GAA1B,CACGQ,QAAD,IACE,IAAIF,OAAJ,CAAY,CAACG,OAAD,EAAUF,MAAV,KAAqB;AAC/BE,IAAAA,OAAO,CAACD,QAAD,CAAP;AACD,GAFD,CAFJ,EAKE,MAAOH,KAAP,IAAiB;AAAA;;AACf,QAAI,CAAAA,KAAK,SAAL,IAAAA,KAAK,WAAL,+BAAAA,KAAK,CAAEG,QAAP,oEAAiBE,MAAjB,MAA4B,GAAhC,EAAqC;AACnCtB,MAAAA,YAAY,CAACuB,UAAb,GADmC,CAEnC;AACD,KAHD,MAGO,IAAI,CAAAN,KAAK,SAAL,IAAAA,KAAK,WAAL,gCAAAA,KAAK,CAAEG,QAAP,sEAAiBE,MAAjB,MAA4B,GAAhC,EAAqC;AAC1C;AACA;AACA;AACA,YAAME,cAAc,GAAGP,KAAK,CAACJ,MAA7B;;AACA,UAAIW,cAAc,CAACC,GAAf,KAAuB,iBAAvB,IAA4CR,KAA5C,aAA4CA,KAA5C,eAA4CA,KAAK,CAAEG,QAAvD,EAAiE,CAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AACF,KArBM,MAqBA;AACL,aAAO,IAAIF,OAAJ,CAAY,CAACG,OAAD,EAAUF,MAAV,KAAqB;AACtCA,QAAAA,MAAM,CAACF,KAAD,CAAN;AACD,OAFM,CAAP;AAGD;;AACD,WAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,GApCH;AAuCA,SAAOX,GAAP;AACD,CA9DD;;AAgEA,OAAO,MAAMA,GAAG,GAAGD,WAAW,EAAvB","sourcesContent":["// import store from \"../store\";\n\nimport axios from \"axios\";\nimport TokenService from \"./token.service\";\nconst baseURL = process.env.REACT_APP_BASE_URL;\n\nconst apiResource = () => {\n  const api = axios.create({\n    baseURL,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Access-Control-Allow-Methods\": \"*\",\n      \"Access-Control-Allow-Origin\": URL,\n      \"Access-Control-Allow-Credentials\": true,\n    },\n  });\n\n  api.interceptors.request.use(\n    (config) => {\n      const token = localStorage.getItem(\"accessToken\");\n\n      if (!token) return config;\n      config.headers[\"Authorization\"] = `Bearer ${token}`;\n      return config;\n    },\n    (error) => Promise.reject(error)\n  );\n\n  api.interceptors.response.use(\n    (response) =>\n      new Promise((resolve, reject) => {\n        resolve(response);\n      }),\n    async (error) => {\n      if (error?.response?.status === 403) {\n        TokenService.removeUser();\n        // window.location = \"/\";\n      } else if (error?.response?.status === 401) {\n        // call refresh token\n        // localStorage.removeUser();\n        // window.location = \"/\";\n        const originalConfig = error.config;\n        if (originalConfig.url !== \"/v1/admin/login\" && error?.response) {\n          // Access Token was expired\n          // if (error.response.status === 400 && !originalConfig._retry) {\n          //   originalConfig._retry = true;\n          //   try {\n          //     const rs = await api.post(\"/api/v1/authenticate/refreshtoken\", {\n          //       refreshToken: TokenService.getLocalRefreshToken(),\n          //     });\n          //     const { accessToken } = rs.data;\n          //     TokenService.updateLocalAccessToken(accessToken);\n          //     return api(originalConfig);\n          //   } catch (_error) {\n          //     return Promise.reject(_error);\n          //   }\n          // }\n        }\n      } else {\n        return new Promise((resolve, reject) => {\n          reject(error);\n        });\n      }\n      return Promise.reject(error);\n    }\n  );\n\n  return api;\n};\n\nexport const api = apiResource();\n"]},"metadata":{},"sourceType":"module"}