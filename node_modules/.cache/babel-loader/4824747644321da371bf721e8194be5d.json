{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport AuthService from \"../services/auth.service\";\nlet user;\n\ntry {\n  user = JSON.parse(localStorage.getItem(\"user\"));\n} catch (err) {\n  user = null;\n}\n\nexport const loginAsync = createAsyncThunk(\"auth/login\", async (values, _ref) => {\n  let {\n    rejectWithValue\n  } = _ref;\n\n  try {\n    const data = await AuthService.loginFunction(values);\n    return data;\n  } catch (error) {\n    if (!error.response) {\n      throw error;\n    }\n\n    return rejectWithValue(error.response.data);\n  }\n});\nexport const logoutAsync = createAsyncThunk(\"auth/logout\", async () => {\n  AuthService.logout();\n});\nconst initialState = user ? {\n  isLoggedIn: true,\n  user,\n  isLoading: false\n} : {\n  isLoggedIn: false,\n  user: null,\n  isLoading: false\n};\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  extraReducers: {\n    [loginAsync.pending]: state => {\n      state.isLoading = true;\n    },\n    [loginAsync.fulfilled]: (state, action) => {\n      state.isLoggedIn = true;\n      state.isLoading = false;\n      state.user = action.payload;\n    },\n    [loginAsync.rejected]: state => {\n      state.isLoggedIn = false;\n      state.isLoading = false;\n      state.user = null;\n    },\n    [logoutAsync.fulfilled]: state => {\n      state.isLoggedIn = false;\n      state.isLoading = false;\n      state.user = null;\n    }\n  }\n});\nconst {\n  reducer\n} = authSlice;\nexport default reducer;","map":{"version":3,"sources":["/Users/mac/Desktop/Projects/capival/src/slices/auth.js"],"names":["createSlice","createAsyncThunk","AuthService","user","JSON","parse","localStorage","getItem","err","loginAsync","values","rejectWithValue","data","loginFunction","error","response","logoutAsync","logout","initialState","isLoggedIn","isLoading","authSlice","name","extraReducers","pending","state","fulfilled","action","payload","rejected","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AAEA,IAAIC,IAAJ;;AACA,IAAI;AACFA,EAAAA,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAP;AACD,CAFD,CAEE,OAAOC,GAAP,EAAY;AACZL,EAAAA,IAAI,GAAG,IAAP;AACD;;AAED,OAAO,MAAMM,UAAU,GAAGR,gBAAgB,CACxC,YADwC,EAExC,OAAOS,MAAP,WAAuC;AAAA,MAAxB;AAAEC,IAAAA;AAAF,GAAwB;;AACrC,MAAI;AACF,UAAMC,IAAI,GAAG,MAAMV,WAAW,CAACW,aAAZ,CAA0BH,MAA1B,CAAnB;AACA,WAAOE,IAAP;AACD,GAHD,CAGE,OAAOE,KAAP,EAAc;AACd,QAAI,CAACA,KAAK,CAACC,QAAX,EAAqB;AACnB,YAAMD,KAAN;AACD;;AACD,WAAOH,eAAe,CAACG,KAAK,CAACC,QAAN,CAAeH,IAAhB,CAAtB;AACD;AACF,CAZuC,CAAnC;AAeP,OAAO,MAAMI,WAAW,GAAGf,gBAAgB,CAAC,aAAD,EAAgB,YAAY;AACrEC,EAAAA,WAAW,CAACe,MAAZ;AACD,CAF0C,CAApC;AAIP,MAAMC,YAAY,GAAGf,IAAI,GACrB;AAAEgB,EAAAA,UAAU,EAAE,IAAd;AAAoBhB,EAAAA,IAApB;AAA0BiB,EAAAA,SAAS,EAAE;AAArC,CADqB,GAErB;AAAED,EAAAA,UAAU,EAAE,KAAd;AAAqBhB,EAAAA,IAAI,EAAE,IAA3B;AAAiCiB,EAAAA,SAAS,EAAE;AAA5C,CAFJ;AAIA,MAAMC,SAAS,GAAGrB,WAAW,CAAC;AAC5BsB,EAAAA,IAAI,EAAE,MADsB;AAE5BJ,EAAAA,YAF4B;AAG5BK,EAAAA,aAAa,EAAE;AACb,KAACd,UAAU,CAACe,OAAZ,GAAuBC,KAAD,IAAW;AAC/BA,MAAAA,KAAK,CAACL,SAAN,GAAkB,IAAlB;AACD,KAHY;AAIb,KAACX,UAAU,CAACiB,SAAZ,GAAwB,CAACD,KAAD,EAAQE,MAAR,KAAmB;AACzCF,MAAAA,KAAK,CAACN,UAAN,GAAmB,IAAnB;AACAM,MAAAA,KAAK,CAACL,SAAN,GAAkB,KAAlB;AACAK,MAAAA,KAAK,CAACtB,IAAN,GAAawB,MAAM,CAACC,OAApB;AACD,KARY;AASb,KAACnB,UAAU,CAACoB,QAAZ,GAAwBJ,KAAD,IAAW;AAChCA,MAAAA,KAAK,CAACN,UAAN,GAAmB,KAAnB;AACAM,MAAAA,KAAK,CAACL,SAAN,GAAkB,KAAlB;AACAK,MAAAA,KAAK,CAACtB,IAAN,GAAa,IAAb;AACD,KAbY;AAcb,KAACa,WAAW,CAACU,SAAb,GAA0BD,KAAD,IAAW;AAClCA,MAAAA,KAAK,CAACN,UAAN,GAAmB,KAAnB;AACAM,MAAAA,KAAK,CAACL,SAAN,GAAkB,KAAlB;AACAK,MAAAA,KAAK,CAACtB,IAAN,GAAa,IAAb;AACD;AAlBY;AAHa,CAAD,CAA7B;AAyBA,MAAM;AAAE2B,EAAAA;AAAF,IAAcT,SAApB;AAEA,eAAeS,OAAf","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport AuthService from \"../services/auth.service\";\n\nlet user;\ntry {\n  user = JSON.parse(localStorage.getItem(\"user\"));\n} catch (err) {\n  user = null;\n}\n\nexport const loginAsync = createAsyncThunk(\n  \"auth/login\",\n  async (values, { rejectWithValue }) => {\n    try {\n      const data = await AuthService.loginFunction(values);\n      return data;\n    } catch (error) {\n      if (!error.response) {\n        throw error;\n      }\n      return rejectWithValue(error.response.data);\n    }\n  }\n);\n\nexport const logoutAsync = createAsyncThunk(\"auth/logout\", async () => {\n  AuthService.logout();\n});\n\nconst initialState = user\n  ? { isLoggedIn: true, user, isLoading: false }\n  : { isLoggedIn: false, user: null, isLoading: false };\n\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  extraReducers: {\n    [loginAsync.pending]: (state) => {\n      state.isLoading = true;\n    },\n    [loginAsync.fulfilled]: (state, action) => {\n      state.isLoggedIn = true;\n      state.isLoading = false;\n      state.user = action.payload;\n    },\n    [loginAsync.rejected]: (state) => {\n      state.isLoggedIn = false;\n      state.isLoading = false;\n      state.user = null;\n    },\n    [logoutAsync.fulfilled]: (state) => {\n      state.isLoggedIn = false;\n      state.isLoading = false;\n      state.user = null;\n    },\n  },\n});\n\nconst { reducer } = authSlice;\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}