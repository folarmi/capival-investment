{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport SettingService from \"../services/settings.service\";\nexport const getSingleAdminProfileAsync = createAsyncThunk(\"settings/get\", async (values, _ref) => {\n  let {\n    rejectWithValue\n  } = _ref;\n\n  try {\n    const data = await SettingService.getSingleAdminProfile(); // console.log(\"data in getsingleadmin func...\", data);\n\n    return data;\n  } catch (error) {\n    if (!error.response) {\n      throw error;\n    }\n\n    return rejectWithValue(error.response.data);\n  }\n});\nconst initialState = {\n  getSingleAdminLoading: false,\n  response: []\n};\nconst settingSlice = createSlice({\n  name: \"settings\",\n  initialState,\n  extraReducers: {\n    [getSingleAdminProfileAsync.pending]: state => {\n      state.getSingleAdminLoading = true;\n    },\n    [getSingleAdminProfileAsync.fulfilled]: (state, action) => {\n      var _action$payload, _action$payload$data;\n\n      state.getSingleAdminLoading = false;\n      state.response = action === null || action === void 0 ? void 0 : (_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : (_action$payload$data = _action$payload.data) === null || _action$payload$data === void 0 ? void 0 : _action$payload$data.profile;\n    },\n    [getSingleAdminProfileAsync.rejected]: state => {\n      state.getSingleAdminLoading = false;\n    }\n  }\n});\nconst {\n  reducer\n} = settingSlice;\nexport default reducer;","map":{"version":3,"sources":["/Users/mac/Desktop/Projects/capival/src/slices/settings.js"],"names":["createSlice","createAsyncThunk","SettingService","getSingleAdminProfileAsync","values","rejectWithValue","data","getSingleAdminProfile","error","response","initialState","getSingleAdminLoading","settingSlice","name","extraReducers","pending","state","fulfilled","action","payload","profile","rejected","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AAEA,OAAOC,cAAP,MAA2B,8BAA3B;AAEA,OAAO,MAAMC,0BAA0B,GAAGF,gBAAgB,CACxD,cADwD,EAExD,OAAOG,MAAP,WAAuC;AAAA,MAAxB;AAAEC,IAAAA;AAAF,GAAwB;;AACrC,MAAI;AACF,UAAMC,IAAI,GAAG,MAAMJ,cAAc,CAACK,qBAAf,EAAnB,CADE,CAEF;;AACA,WAAOD,IAAP;AACD,GAJD,CAIE,OAAOE,KAAP,EAAc;AACd,QAAI,CAACA,KAAK,CAACC,QAAX,EAAqB;AACnB,YAAMD,KAAN;AACD;;AACD,WAAOH,eAAe,CAACG,KAAK,CAACC,QAAN,CAAeH,IAAhB,CAAtB;AACD;AACF,CAbuD,CAAnD;AAgBP,MAAMI,YAAY,GAAG;AACnBC,EAAAA,qBAAqB,EAAE,KADJ;AAEnBF,EAAAA,QAAQ,EAAE;AAFS,CAArB;AAKA,MAAMG,YAAY,GAAGZ,WAAW,CAAC;AAC/Ba,EAAAA,IAAI,EAAE,UADyB;AAE/BH,EAAAA,YAF+B;AAG/BI,EAAAA,aAAa,EAAE;AACb,KAACX,0BAA0B,CAACY,OAA5B,GAAuCC,KAAD,IAAW;AAC/CA,MAAAA,KAAK,CAACL,qBAAN,GAA8B,IAA9B;AACD,KAHY;AAIb,KAACR,0BAA0B,CAACc,SAA5B,GAAwC,CAACD,KAAD,EAAQE,MAAR,KAAmB;AAAA;;AACzDF,MAAAA,KAAK,CAACL,qBAAN,GAA8B,KAA9B;AACAK,MAAAA,KAAK,CAACP,QAAN,GAAiBS,MAAjB,aAAiBA,MAAjB,0CAAiBA,MAAM,CAAEC,OAAzB,4EAAiB,gBAAiBb,IAAlC,yDAAiB,qBAAuBc,OAAxC;AACD,KAPY;AAQb,KAACjB,0BAA0B,CAACkB,QAA5B,GAAwCL,KAAD,IAAW;AAChDA,MAAAA,KAAK,CAACL,qBAAN,GAA8B,KAA9B;AACD;AAVY;AAHgB,CAAD,CAAhC;AAiBA,MAAM;AAAEW,EAAAA;AAAF,IAAcV,YAApB;AAEA,eAAeU,OAAf","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\nimport SettingService from \"../services/settings.service\";\n\nexport const getSingleAdminProfileAsync = createAsyncThunk(\n  \"settings/get\",\n  async (values, { rejectWithValue }) => {\n    try {\n      const data = await SettingService.getSingleAdminProfile();\n      // console.log(\"data in getsingleadmin func...\", data);\n      return data;\n    } catch (error) {\n      if (!error.response) {\n        throw error;\n      }\n      return rejectWithValue(error.response.data);\n    }\n  }\n);\n\nconst initialState = {\n  getSingleAdminLoading: false,\n  response: [],\n};\n\nconst settingSlice = createSlice({\n  name: \"settings\",\n  initialState,\n  extraReducers: {\n    [getSingleAdminProfileAsync.pending]: (state) => {\n      state.getSingleAdminLoading = true;\n    },\n    [getSingleAdminProfileAsync.fulfilled]: (state, action) => {\n      state.getSingleAdminLoading = false;\n      state.response = action?.payload?.data?.profile;\n    },\n    [getSingleAdminProfileAsync.rejected]: (state) => {\n      state.getSingleAdminLoading = false;\n    },\n  },\n});\n\nconst { reducer } = settingSlice;\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}